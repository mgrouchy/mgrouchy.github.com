<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mike Grouchy</title><link href="http://mikegrouchy.com/" rel="alternate"></link><link href="http://mikegrouchy.com/feeds/06.atom.xml" rel="self"></link><id>http://mikegrouchy.com/</id><updated>2014-06-22T00:00:00-04:00</updated><entry><title>Unblock out of region content with Digital Ocean and sshuttle</title><link href="http://mikegrouchy.com/blog/2014/06/unblock-out-of-region-content-with-digital-ocean-and-sshuttle.html" rel="alternate"></link><updated>2014-06-22T00:00:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2014-06-22:blog/2014/06/unblock-out-of-region-content-with-digital-ocean-and-sshuttle.html</id><summary type="html">&lt;p&gt;If you live in Canada(like me) or elsewhere. You are probably interested in
paying for services like Hulu and Spotify and are probably wondering how you
can get that good US netflix content. You will be happy to know that it is in
fact very easy to accomplish this for as little as 5$/month through Digital
Ocean and still have a server that you can do other things with in the meantime.&lt;/p&gt;
&lt;p&gt;Before I go through the setup here, I know there are alternatives which are
similarily priced. Unblock.us, and mediahint to just name a couple.The big
advantage here is that you can setup/teardown your Digital Ocean droplets at
your convenience which is nice if you are really pinching pennies, because
these are charged hourly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Digital Ocean Pricing&amp;quot;" src="/static/images/2014/digital-ocean-pricing.png" /&gt;&lt;/p&gt;
&lt;p&gt;The other big advantage of using something like Digital Ocean is that you can
use the droplet for other things besides using it tunnel your internet traffic.
Convinced yet? If so, lets move on to the setup.&lt;/p&gt;
&lt;h2&gt;1. Signup For Digital Ocean/Set up a Droplet&lt;/h2&gt;
&lt;p&gt;The first step here is just to head over to &lt;a href="https://www.digitalocean.com/?refcode=b0a3d514963a"&gt;Digital Ocean&lt;/a&gt; (referral) and signup. This can
also be accomplished with a VPN you already have, and if that is the route you
want to go, just head on down to step 2.&lt;/p&gt;
&lt;p&gt;Once you have logged into your &lt;a href="https://www.digitalocean.com/?refcode=b0a3d514963a"&gt;Digital Ocean&lt;/a&gt; account and have verified your email
and billing details you can go ahead and click on the "Create" button in the
side bar. This should give you the Droplet creation wizard and you can just follow
these steps:&lt;/p&gt;
&lt;p&gt;First chose a hostname, this can be whatever you want, like "VPN", etc.
&lt;img alt="&amp;quot;Choose Hostname&amp;quot;" src="/static/images/2014/creat-droplet-hostname.png" /&gt;
Once you have chosen a hostname, go ahead and select the region you want your
traffic to be in. If you are Canadian like me who might want your traffic to
appear as it is comign from the US then you want to select a US Region.
&lt;img alt="&amp;quot;Select Region&amp;quot;" src="/static/images/2014/digital-ocean-select-region.png" /&gt;
Next you choose your flavor of Linux, in my case I have chosen Ubuntu.
&lt;img alt="&amp;quot;Select Droplet Image&amp;quot;" src="/static/images/2014/digital-ocean-select-image.png" /&gt;
Next you want to choose the SSH keys to use, if you have &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2"&gt;set them up&lt;/a&gt;.
If you don't have ssh keys set up and you don't want to use them. That is okay,
after you create the droplet &lt;a href="https://www.digitalocean.com/?refcode=b0a3d514963a"&gt;Digital Ocean&lt;/a&gt; will email you a root password to the
email you signed up with. It is recommended you change this root password by sshing
into your droplet with the current root password and &lt;a href="https://www.digitalocean.com/community/questions/can-i-change-root-password"&gt;changing it&lt;/a&gt;.
&lt;img alt="&amp;quot;Choose SSH Keys and Create&amp;quot;" src="/static/images/2014/digital-ocean-ssh-create.png" /&gt;&lt;/p&gt;
&lt;h2&gt;2. Install sshuttle&lt;/h2&gt;
&lt;p&gt;Installing sshuttle is each, just download it to your computer. You also need Python installed on
your machine(Mac or Linux) to eventually run sshuttle.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;apenwarr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sshuttle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Optionally you can download and extract a &lt;code&gt;zip&lt;/code&gt; or a &lt;code&gt;.tar.gz&lt;/code&gt; from the sshuttle
&lt;a href="https://github.com/apenwarr/sshuttle/releases"&gt;download page&lt;/a&gt; on &lt;a href="http://github.com"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;3. Start your Tunnel&lt;/h2&gt;
&lt;p&gt;Okay. We have our droplet setup and we have downloaded sshuttle. Now to start
our DNS tunnel.&lt;/p&gt;
&lt;p&gt;Navigate to the directory where you downloaded sshuttle locally then:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;   &lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;sshuttle&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dns&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vvr&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dropletserver&lt;/span&gt; 0&lt;span class="o"&gt;/&lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will then prompt you for your local root password and the password to your
droplet.
&lt;strong&gt;Note&lt;/strong&gt;: On OSX this will require a restart after you run this the first time.&lt;/p&gt;
&lt;p&gt;You should now be able to navigate to that out of region website you wanted to
visit so much and it should just work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Hulu&amp;quot;" src="/static/images/2014/hulu.png" /&gt;&lt;/p&gt;
&lt;h2&gt;What else is this good for?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;It is essentially a poor mans instant VPN, you don't even need to have root access on the machine you are connecting to.&lt;/li&gt;
&lt;li&gt;Allows you to surf safely. It protects you from standard attacks like Firesheep on insecure networks.&lt;/li&gt;
&lt;li&gt;Anything else you can think of that you would like to use a VPN for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any other uses for this or thoughts about this? Leave something in the comments or
contact me on &lt;a href="http://twitter.com/mgrouchy"&gt;twitter&lt;/a&gt;.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Pro Tip - Pip Upgrade All Python Packages</title><link href="http://mikegrouchy.com/blog/2014/06/pro-tip-pip-upgrade-all-python-packages.html" rel="alternate"></link><updated>2014-06-02T00:00:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2014-06-02:blog/2014/06/pro-tip-pip-upgrade-all-python-packages.html</id><summary type="html">&lt;p&gt;An open and ongoing &lt;a href="https://github.com/pypa/pip/issues/59"&gt;feature request&lt;/a&gt; for PIP is to add an &lt;code&gt;upgrade-all&lt;/code&gt; command to
PIP. Due to the lack of this feature a workaround is required. Enter Stackoverflow.&lt;/p&gt;
&lt;p&gt;I have been using a variation of this particular command line trick for awhile,
but when starting writing this up I googled other solutions and &lt;a href="http://stackoverflow.com/a/3452888/2867"&gt;this&lt;/a&gt; is one of the
nicest and most straightforward I have seen.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;^\-e&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; 1  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;xargs&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So next time you want to upgrade all the packages in your virtualenv, this is a great
place to start. I have this set up as an alias to &lt;code&gt;pipup&lt;/code&gt; in my &lt;a href="https://github.com/mgrouchy/dotfiles/blob/master/.zshalias#L31"&gt;.zshrc&lt;/a&gt; for convenience.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Write Less Code</title><link href="http://mikegrouchy.com/blog/2012/06/write-less-code.html" rel="alternate"></link><updated>2012-06-26T09:50:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2012-06-26:blog/2012/06/write-less-code.html</id><summary type="html">&lt;p&gt;One of the fundamental truths of software development is that you have to write code,
but one of the biggest fallacies is the idea that writing code is your job. When I
first started out as a software developer, I fell into that trap, writing code is
a powerful thing, its empowering, you feel like you are productive and you are
accomplishing things. However, what I have learned over the years is the real
truth of the matter. The truth that the job of a software developer is to write
as little code as possible.&lt;/p&gt;
&lt;p&gt;Now, don't get me wrong, we should not be getting ourselves into &lt;a href="http://codegolf.com/"&gt;code golf&lt;/a&gt;
situations where we are compacting code and saving keystrokes to the point where
the code you produce is no longer understandable. When you think about it though
the fact that most of your time will be maintaining the terrible code you wrote,
writing less code and not creating more work for yourself will start to look like
an exceptionally good idea.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Look around, look at your tools, look at the framework you likely use to
produce that thing you work on. Everything you do, all the tools you use,
everything is trying make you write less code. Your tools are trying to make
you less error prone, and abstracting away the things that will cause you trouble
down the road.&lt;/p&gt;
&lt;p&gt;So why should you write less code? When I said earlier that your job was to write
less code, I was fibbing a little bit. Really your job is to &lt;strong&gt;think&lt;/strong&gt;, your job
is to think about the problem at hand, devise an elegant solution and then turn
that solution into software. One of the byproducts of creating software is that you
have to write code to solve problems.&lt;/p&gt;
&lt;p&gt;&lt;img alt="the thinker" src="http://upload.wikimedia.org/wikipedia/commons/thumb/5/56/The_Thinker,_Rodin.jpg/250px-The_Thinker,_Rodin.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;Code is a by-product&lt;/h2&gt;
&lt;p&gt;Code isn't that important. We love to convince ourselves that it is because
as we actually start executing and turning our solutions into software, it seems
like writing code is both a means and an end unto itself. We talk about our
&lt;a href="http://mikegrouchy.com/blog/compile-vim-with-python-on-osx-with-homebrew.html"&gt;editors&lt;/a&gt;,
we talk about our &lt;a href="http://pycoders.com"&gt;language of choice&lt;/a&gt; and we talk about our
&lt;a href="http://mikegrouchy.com/blog/zsh-is-your-friend.html"&gt;environments&lt;/a&gt;. I do it,
you do it, we all do it. There is no shame in enjoying the craft of the work you do.
The trick is to stay focused. Code is awesome, but its also the enemy, it takes
time to write, it can be fragile, it can be unclear and not particularly robust.&lt;/p&gt;
&lt;p&gt;This is why I stick with the mantra "Write less code". Whenever I feel like something
is getting bigger than it should be or more complicated than it should be, I say
"Write less code". Whenever I write so much code that it gets hard to keep it
in context, I refactor, I clean it up, all the while, thinking about "Write less code".&lt;/p&gt;
&lt;p&gt;As much as it pains me to say, sometimes there is no way to get around writing a
bunch of code, but if you can't be concise, be clear. Writing less code is
writing &lt;a href="http://amzn.to/MJFkE4"&gt;clean code&lt;/a&gt;. Writing less code is also about
writing clear code. When you are economical with the code you write the purpose
of your code becomes clear.&lt;/p&gt;
&lt;p&gt;So, whats the lesson here? Most importantly I think the lesson here is that
code is a by-product, its an unavoidable thing that you generate in the process
of doing your job. So think more, &lt;a href="http://amzn.to/KHjbJp"&gt;refactor more&lt;/a&gt;, remove some
old code and write less new code, do yourself a favor and start this today.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Great Python/Django Testing Talks</title><link href="http://mikegrouchy.com/blog/2012/06/great-pythondjango-testing-talks.html" rel="alternate"></link><updated>2012-06-10T21:05:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2012-06-10:blog/2012/06/great-pythondjango-testing-talks.html</id><summary type="html">&lt;p&gt;I have been working on some tests for an upcoming product at &lt;a href="http://swixhq.com"&gt;SWIX&lt;/a&gt;
and as any good developer I think its important to make an effort to constantly be
learning new things. In this vein I starting digging through the videos for
this years &lt;a href="https://us.pycon.org/2012/"&gt;Pycon US&lt;/a&gt;. Lo and Behold Testing was a
popular topic at Pycon so there were lots of talks to watch!&lt;/p&gt;
&lt;p&gt;My two favorite talks were Testing and Django by &lt;a href="https://twitter.com/carljm"&gt;Carl Meyer&lt;/a&gt;
and Fast Test, Slow Test by the always insightful &lt;a href="https://twitter.com/garybernhardt"&gt;Gary Bernhardt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Testing and Django - Carl Meyer&lt;/h2&gt;
&lt;p&gt;&lt;iframe width="600" height="450" src="http://www.youtube.com/embed/ickNQcNXiS4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;br/&gt;
Carl Meyer gives this great deep dive into testing Django projects, there are
plenty of gems in here, including some code for a Django Test Runner using Unittest2's
test discovery. Carl gives some great tips for writing tests with Django as well as tips
for just writing good tests in general.&lt;/p&gt;
&lt;h2&gt;Fast Test, Slow Test - Gary Bernhardt&lt;/h2&gt;
&lt;p&gt;&lt;iframe width="600" height="450" src="http://www.youtube.com/embed/RAxiiRPHS9k" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;br/&gt;
This talk is superb. Gary Bernhardt talks about how to write a fast test suite as
well as how you should be testing your applications. He points out that the slow
test suite problem is usually releated to the problem of test authors writing Unit
Tests which are actually System Tests.&lt;/p&gt;
&lt;p&gt;Those two testing talks were my favorites, but some other good ones that are
worth checking out are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.youtube.com/watch?v=TmuEDxX1FDQ"&gt;Certainty in an Uncertain World: Gaining Confidence through Security Testing&lt;/a&gt; - Geremy Condra&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=hvPYuqzTPIk"&gt;Fake It Til You Make It: Unit Testing Patterns With Mocks and Fakes&lt;/a&gt; - Brian K. Jones&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=1VZfL9JVgFg"&gt;Speedily Practical Large-Scale Tests&lt;/a&gt; - Erik Rose&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Xu5EhKVZdV8"&gt;Stop Mocking, Start Testing&lt;/a&gt; - Augie Fackler &amp;amp; Nathaniel Manista&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9LVqBQcFmyw"&gt;pytest - rapid and simple testing with Python&lt;/a&gt; - Holger Krekel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides these videos another great resource to take your Python testing a bit
farther is this book, the &lt;a href="http://amzn.to/LUe8SX"&gt;Python Testing Cookbook &lt;/a&gt;. It
has plenty of great strategys that you can use for testing your Python projects.&lt;/p&gt;
&lt;p&gt;If you have any other good Django testing tips or Talks leave them in the comments.
If you are looking for more Python news, tips and discussion you should check out
&lt;a href="http://pycoders.com"&gt;Pycoders Weekly&lt;/a&gt;, a weekly Python newsletter that I curate.&lt;/p&gt;</summary><category term=""></category></entry></feed>