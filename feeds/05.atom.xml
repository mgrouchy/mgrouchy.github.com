<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mike Grouchy</title><link href="http://mikegrouchy.com/" rel="alternate"></link><link href="http://mikegrouchy.com/feeds/05.atom.xml" rel="self"></link><id>http://mikegrouchy.com/</id><updated>2014-05-28T00:00:00-04:00</updated><entry><title>Django-Stronghold 0.2.6 released</title><link href="http://mikegrouchy.com/blog/2014/05/django-stronghold-026-released.html" rel="alternate"></link><updated>2014-05-28T00:00:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2014-05-28:blog/2014/05/django-stronghold-026-released.html</id><summary type="html">&lt;p&gt;I have just pushed version 0.2.6 of &lt;a href="https://github.com/mgrouchy/django-stronghold"&gt;Django-Stronghold&lt;/a&gt; to &lt;a href="https://pypi.python.org/pypi/django-stronghold/"&gt;pypi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main update in this version is the new configuration option &lt;code&gt;STRONGHOLD_PERMISSIONS_DECORATOR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The STRONGHOLD_PERMISSIONS_DECORATOR setting allows you to override the default
behavior which currently defaults to requiring your views to default to
login_required and replace that with any decorator you like that serves your
purpose like the &lt;code&gt;staff_member_required decorator&lt;/code&gt; or a decorator you have created
yourself which supports your specific mix of login requirements.&lt;/p&gt;
&lt;p&gt;This version currently supports Django 1.4.x, 1.5.x and 1.6.x, download it and
try it out and please &lt;a href="https://github.com/mgrouchy/django-stronghold/issues"&gt;report any bugs&lt;/a&gt; if you notice anything.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Be Pythonic: __init__.py</title><link href="http://mikegrouchy.com/blog/2012/05/be-pythonic-__init__py.html" rel="alternate"></link><updated>2012-05-16T23:25:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2012-05-16:blog/2012/05/be-pythonic-__init__py.html</id><summary type="html">&lt;p&gt;This is hopefully the first in a series of posts about writing Pythonic code and
explaining some common Python idioms.&lt;/p&gt;
&lt;p&gt;So the first thing I am going to address in this series of posts is &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What is &lt;code&gt;__init__.py&lt;/code&gt; used for?&lt;/h2&gt;
&lt;p&gt;The primary use of &lt;code&gt;__init__.py&lt;/code&gt; is to initialize Python packages. The easiest
way to demonstrate this is to take a look at the structure of a standard Python
module.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;file3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;subpackage&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
        &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="n"&gt;submodule1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="n"&gt;submodule2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see in the structure above the inclusion of the &lt;code&gt;__init__.py&lt;/code&gt; file in
a directory indicates to the Python interpreter that the directory should be
treated like a Python package&lt;/p&gt;
&lt;h2&gt;What goes in &lt;code&gt;__init__.py&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt; can be an empty file but it is often used to perform setup needed
for the package(import things, load things into path, etc).&lt;/p&gt;
&lt;p&gt;One common thing to do in your &lt;code&gt;__init__.py&lt;/code&gt; is to import selected Classes, functions,
etc into the package level so they can be convieniently imported from the package.&lt;/p&gt;
&lt;p&gt;In our example above we can say that file.py has the Class File. So without
anything in our &lt;code&gt;__init__.py&lt;/code&gt; you would import with this syntax:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package.file&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However you can import File into your &lt;code&gt;__init__.py&lt;/code&gt; to make it available at the
package level:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in your __init__.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;file&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;

&lt;span class="c"&gt;# now import File from package&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another thing to do is at the package level make subpackages/modules available
with the &lt;code&gt;__all__&lt;/code&gt; variable. When the interpeter sees an &lt;code&gt;__all__&lt;/code&gt; variable defined
in an &lt;code&gt;__init__.py&lt;/code&gt; it imports the modules listed in the &lt;code&gt;__all__&lt;/code&gt; variable when you do:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;package&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; is a list containing the names of modules that you want to be imported
with import * so looking at our above example again if we wanted to import the
submodules in subpackage the &lt;code&gt;__all__&lt;/code&gt; variable in &lt;code&gt;subpackage/__init__.py&lt;/code&gt; would be:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;__all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submodule1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;submodule2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the &lt;code&gt;__all__&lt;/code&gt; variable populated like that, when you perform&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subpackage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it would import submodule1 and submodule2.&lt;/p&gt;
&lt;p&gt;As you can see &lt;code&gt;__init__.py&lt;/code&gt; can be very useful besides its primary function of
indicating that a directory is a module. If you have any comments or questions,
hit up the comments or contact me on &lt;a href="http://twitter.com/mgrouchy"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are looking for more Python news, tips and discussion you should check out
&lt;a href="http://pycoders.com"&gt;Pycoder's Weekly&lt;/a&gt; a weekly Python newsletter that I curate.&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Compile Vim with Python support on OSX with Homebrew</title><link href="http://mikegrouchy.com/blog/2012/05/compile-vim-with-python-support-on-osx-with-homebrew.html" rel="alternate"></link><updated>2012-05-09T10:17:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2012-05-09:blog/2012/05/compile-vim-with-python-support-on-osx-with-homebrew.html</id><summary type="html">&lt;p&gt;&lt;a href="http://twitter.com/myusuf3"&gt;Mahdi&lt;/a&gt; asked me today how I compiled Vim with +Python
on OSX and I couldn't remember the exact commands, so I am writing this blog post
so I will remember in the future and because someone else might find this useful.&lt;/p&gt;
&lt;p&gt;Compiling Vim with +Python or +Ruby is required if you want to run any plugins
that have peices that are written in those languages. The usual way around this
on OSX is to just install &lt;a href="https://github.com/b4winckler/macvim"&gt;MacVim&lt;/a&gt; and use
that. However, if you really want to use terminal Vim, you are out of luck on OSX.&lt;/p&gt;
&lt;p&gt;So this is where &lt;a href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; comes in, we can use Homebrew to compile vim from a custom
formula. The only requirements to do this are &lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; and Homebrew.&lt;/p&gt;
&lt;p&gt;You can install Mercurial by using either easy_install or pip:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#install mercurial&lt;/span&gt;
sudo easy_install mercurial
&lt;span class="c"&gt;#or&lt;/span&gt;
sudo pip install mercurial
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can follow the directions on the &lt;a href="https://github.com/mxcl/homebrew/wiki/installation"&gt;Homebrew Github Wiki&lt;/a&gt; to install homebrew.&lt;/p&gt;
&lt;p&gt;Now you can Install this Homebrew formula which has been modified slightly to my tastes
to install Vim.&lt;/p&gt;
&lt;script src="https://gist.github.com/2051422.js?file=vim.rb"&gt;&lt;/script&gt;

&lt;p&gt;To install this formula you can just use this command, or fork the Gist and modify
the formula as you see fit(that's what I did) to install your flavor of Vim.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;brew install https://raw.github.com/gist/2051422/0cfce544a4ab86318221c4d7213306a7b7ec7b3d/vim.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default the Vim compiled with this script is compiled with +python and +ruby,
if you want support for other interpreters you can pass those parameters to the script with:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;--enable-interp&lt;span class="o"&gt;=&lt;/span&gt;NAME,...&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;lua, mzscheme, perl, python, python3, tcl and/or ruby&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also specify vim be compiled with features(the scripts, default is normal)
To see what the features do, you can see this &lt;a href="http://www.drchip.org/astronaut/vim/vimfeat.html"&gt;rather ugly table&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;--with-features&lt;span class="o"&gt;=&lt;/span&gt;TYPE&lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;tiny, small, normal, big or huge&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that you have vim installed with your interpreters and features compiled,
go ahead and check the version:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;vim --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you should see that it is the updated version.&lt;/p&gt;
&lt;p&gt;If you don't see that it is the updated version, it means your /usr/local/bin isn't
on your path, or if it is on your path it comes after usr/bin.&lt;/p&gt;
&lt;p&gt;So how do you fix this?&lt;/p&gt;
&lt;h2&gt;Option 1: Update your path:&lt;/h2&gt;
&lt;p&gt;In your .zshrc (&lt;a href="http://mikegrouchy.com/blog/zsh-is-your-friend.html"&gt;you are using Zsh right?&lt;/a&gt;) or .bashrc
update your path.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#this&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin:/usr/sbin
&lt;span class="c"&gt;#to this&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Option 2: Move your old Vim and symlink the new one&lt;/h2&gt;
&lt;p&gt;You can move the Vim that comes with OSX and Symlink the one brew installed&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;sudo mv /usr/bin/vim /usr/bin/oldvim
ln -s /usr/local/bin/vim /usr/bin/vim
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of those should solve your problem.&lt;/p&gt;
&lt;h2&gt;Protip:&lt;/h2&gt;
&lt;p&gt;You may notice that your terminal Vim does not support backspace in Insert mode
with the settings I have setup in the brew formula.&lt;/p&gt;
&lt;p&gt;If this is something you want, you can stick this line in your .vimrc:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;backspace&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;eol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I think that should be it. If you have any questions leave it in the comments or
ask me on &lt;a href="http://twitter.com/mgrouchy"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Edit: Discussion on &lt;a href="http://news.ycombinator.com/item?id=3949774"&gt;Hacker News&lt;/a&gt;&lt;/p&gt;</summary><category term=""></category></entry><entry><title>Embeddable Tweets</title><link href="http://mikegrouchy.com/blog/2010/05/embeddable-tweets.html" rel="alternate"></link><updated>2010-05-05T02:14:00-04:00</updated><author><name>Mike Grouchy</name></author><id>tag:mikegrouchy.com,2010-05-05:blog/2010/05/embeddable-tweets.html</id><summary type="html">&lt;p&gt;Twitter now allows you to Embed a Tweet, all you need is the url of a tweet, like
&lt;a href="http://twitter.com/mgrouchy/status/13429079254"&gt;http://twitter.com/mgrouchy/status/13429079254&lt;/a&gt;,
and you can use Twitters [Blackbird Pie](http://media.twitter.com/blackbird-pie/
app to embed the tweet in your website like below:&lt;/p&gt;
&lt;!-- http://twitter.com/mgrouchy/status/13429079254 --&gt;

&lt;p&gt;&lt;style type='text/css'&gt;.bbpBox{background:url(http://s.twimg.com/a/1271891196/images/themes/theme15/bg.png) #022330;padding:20px;}p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px}p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6}p.bbpTweet span.metadata span.author{line-height:19px}p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px}p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class='bbpBox'&gt;&lt;p class='bbpTweet'&gt;This is me tweeting about how you can embed tweets, is this embedded?&lt;span class='timestamp'&gt;&lt;a title='Wed May 05 14:23:55 +0000 2010' href='http://twitter.com/mgrouchy/status/13429079254'&gt;less than a minute ago&lt;/a&gt; via &lt;a href="http://www.tweetdeck.com" rel="nofollow"&gt;TweetDeck&lt;/a&gt;&lt;/span&gt;&lt;span class='metadata'&gt;&lt;span class='author'&gt;&lt;a href='http://twitter.com/mgrouchy'&gt;&lt;img src='http://a3.twimg.com/profile_images/817183015/swix-hipster_normal.JPG' /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href='http://twitter.com/mgrouchy'&gt;Mike Grouchy&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;mgrouchy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;
&lt;p&gt;Here is the Source:&lt;/p&gt;
&lt;script src="http://gist.github.com/390841.js"&gt;&lt;/script&gt;

&lt;p&gt;Its kind of interesting, Blackbird Pie just generates a html/css snippet that you
 can embed in your page. I am not sure if I prefer this way of doing things or the
 way &lt;a href="http://github.com"&gt;github&lt;/a&gt; does it with cross site javascript.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;</summary><category term=""></category></entry></feed>