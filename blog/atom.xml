<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        feed for mikegrouchy.com    </title>
        <link href="http://mikegrouchy.com/blog/atom.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2013-02-15T09:52:08Z</updated>

    <id>http://mikegrouchy.com/blog/atom.xml/</id>

            <entry>
            <title type="html">Announcing Django-Stronghold</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2013/02/announcing-django-stronghold.html"/>
            <updated>2013-02-15T10:00:00Z</updated>
            <published>2013-02-15T10:00:00Z</published>
            <id>http://mikegrouchy.comblog/2013/02/announcing-django-stronghold.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="django"
                        label="Django" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="authentication"
                        label="Authentication" />
            
            <content type="html">
                                &lt;p&gt;I spent much of last year trying to turn up my Open Source contributions
so I spent much of my time contibuting to other peoples Open Source Projects. Its
2013 and its a new year, so I am making a push to get some Open Source projects
that I have had in the pipe actually out there in the wild. The first of these is
&lt;a href=&#34;http://github.com/mgrouchy/django-stronghold&#34;&gt;django-stronghold&lt;/a&gt;. If you are a Django developer and
you have worked on a Django app, you might have coded something like this already which
makes it the perfect target for open&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;Django-Stronghold defaults your Django project to private. This means that via
some middleware all your Django Views become &lt;code&gt;login_required&lt;/code&gt;. Stronghold also
provides some mechanisims to make views public via a decorator or whitelisting
some of your url patterns. Either way, if this sounds useful to you &lt;a href=&#34;http://github.com/mgrouchy/django-stronghold&#34;&gt;check out the
repo&lt;/a&gt;, install it and report any issues you run&amp;nbsp;into.&lt;/p&gt;
&lt;p&gt;Shout out to &lt;a href=&#34;http://twitter.com/richardlblair&#34;&gt;Richard Blair&lt;/a&gt; for help with&amp;nbsp;this.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Introducing Python Jobs HQ</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2013/02/introducing-pythonjobshq.html"/>
            <updated>2013-02-14T10:35:00Z</updated>
            <published>2013-02-14T10:35:00Z</published>
            <id>http://mikegrouchy.comblog/2013/02/introducing-pythonjobshq.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="programming"
                        label="Programming" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="jobs"
                        label="Jobs" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="careers"
                        label="Careers" />
            
            <content type="html">
                                &lt;p&gt;As you may know if you have read this blog, I am one of the curators for &lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoder&amp;#8217;s Weekly&lt;/a&gt;.
We have been working on a bunch of small projects to try to bring more value from Pycoder&amp;#8217;s
into the python community. The first thing we have launched this year is &lt;a href=&#34;http://pythonjobshq.com&#34;&gt;Python Jobs &lt;span class=&#34;caps&#34;&gt;HQ&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pythonjobshq.com&#34;&gt;Python Jobs &lt;span class=&#34;caps&#34;&gt;HQ&lt;/span&gt;&lt;/a&gt; is a Job site we are running that is focused on
putting the best jobs in front of the best people. Jobs posted on the site are posted to
the &lt;a href=&#34;http://twitter.com/pycoders&#34;&gt;@pycoders&lt;/a&gt; fast growing Twitter account and the Job Board
is advertised weekly in the newsletter. Already we have had great companies like &lt;a href=&#34;http://newsle.com&#34;&gt;Newsle&lt;/a&gt;, &lt;a href=&#34;http://path.com&#34;&gt;Path&lt;/a&gt;
&lt;a href=&#34;http://datadoghq.com&#34;&gt;Datadoghq&lt;/a&gt; and &lt;a href=&#34;http://cyaninc.com&#34;&gt;Cyan Inc&lt;/a&gt;. and others post with us. If you have a Python Job to post
for your company or if you are looking to find a new job as a Python Developer,
you should check out &lt;a href=&#34;http://pythonjobshq.com&#34;&gt;Python Jobs &lt;span class=&#34;caps&#34;&gt;HQ&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any questions feel free to reach out to me on &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;Twitter&lt;/a&gt; or email our &lt;a href=&#34;mailto:admin@pycoders.com&#34;&gt;Pycoder&amp;#8217;s Email&lt;/a&gt;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Force websites to use SSL in Google Chrome</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2012/07/force-sites-to-use-ssl-in-chrome.html"/>
            <updated>2012-07-23T09:30:00Z</updated>
            <published>2012-07-23T09:30:00Z</published>
            <id>http://mikegrouchy.comblog/2012/07/force-sites-to-use-ssl-in-chrome.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="browser"
                        label="Browser" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="security"
                        label="Security" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="tip"
                        label="Tip" />
            
            <content type="html">
                                &lt;p&gt;I saw this tip in the comments over at &lt;a href=&#34;http://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; today
and I thought that this is a great alternative to force &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; for sites that don&amp;#8217;t have
it&amp;nbsp;available.&lt;/p&gt;
&lt;h2&gt;Step&amp;nbsp;1&lt;/h2&gt;
&lt;p&gt;Navigate to Chrome&amp;#8217;s net internals dashboard by&amp;nbsp;typing&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chrome://net-internals/&lt;/code&gt; into your&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;You should&amp;nbsp;see:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;net-internals&#34; src=&#34;http://mikegrouchy.com/media/images/2012/07/net-internals.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Step&amp;nbsp;2&lt;/h2&gt;
&lt;p&gt;Navigate to the &lt;a href=&#34;http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&#34;&gt;&lt;span class=&#34;caps&#34;&gt;HSTS&lt;/span&gt;&lt;/a&gt;(&lt;span class=&#34;caps&#34;&gt;HTTPS&lt;/span&gt; Strict Transport Security) Tab and you should see&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hsts&#34; src=&#34;http://mikegrouchy.com/media/images/2012/07/hsts.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Step&amp;nbsp;3&lt;/h2&gt;
&lt;p&gt;From there its pretty easy, just type in the site you want to force to &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; and
you are&amp;nbsp;done!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;hsts&#34; src=&#34;http://mikegrouchy.com/media/images/2012/07/add-hsts-domain.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do you have any other Chrome security tips? Leave them in the&amp;nbsp;comments!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">The Setup</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2012/07/the-setup.html"/>
            <updated>2012-07-18T08:35:00Z</updated>
            <published>2012-07-18T08:35:00Z</published>
            <id>http://mikegrouchy.comblog/2012/07/the-setup.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="software"
                        label="Software" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="programming"
                        label="Programming" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="hardware"
                        label="Hardware" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="setup"
                        label="Setup" />
            
            <content type="html">
                                &lt;p&gt;This post is inspired by &lt;a href=&#34;http://www.mahdiyusuf.com/post/16687503726/the-setup&#34;&gt;Mahdi&lt;/a&gt; and &lt;a href=&#34;http://usesthis.com/&#34;&gt;The Setup&lt;/a&gt;. I had originally written a rather terrible post about my &lt;a href=&#34;http://mikegrouchy.com/blog/my-development-toolbox.html&#34;&gt;development toolbox&lt;/a&gt; so I figured it was time to revisit this and get it right for people who&amp;nbsp;care.&lt;/p&gt;
&lt;h2&gt;Hardware&lt;/h2&gt;
&lt;p&gt;Not a lot going on here, nothing fancy. Just macs, running &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; Lion. The hardware is a bit older, but I spend most of my time in a terminal, so I don&amp;#8217;t really notice so&amp;nbsp;much.&lt;/p&gt;
&lt;h3&gt;Work:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2008 Aluminum Macbook, &lt;span class=&#34;caps&#34;&gt;4GB&lt;/span&gt;&amp;nbsp;ram&lt;/li&gt;
&lt;li&gt;Magic&amp;nbsp;Mouse&lt;/li&gt;
&lt;li&gt;Standard Apple wired keyboard (I like having the numberpad and not having to be worried about&amp;nbsp;batteries)&lt;/li&gt;
&lt;li&gt;27&amp;#8221; Cinema&amp;nbsp;Display&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of all these things, I would have to say the cinema display is incredible. I don&amp;#8217;t normally use my laptop screen when it is connected to the cinema display to avoid &lt;a href=&#34;http://en.wikipedia.org/wiki/Repetitive_strain_injury&#34;&gt;&lt;span class=&#34;caps&#34;&gt;RSI&lt;/span&gt;&lt;/a&gt; issues, however, when I do have it open its normally just for the &lt;a href=&#34;http://rd.io&#34;&gt;rdio&lt;/a&gt;&amp;nbsp;client.&lt;/p&gt;
&lt;h3&gt;Home:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;2010 iMac 21.5&amp;#8221;, &lt;span class=&#34;caps&#34;&gt;8GB&lt;/span&gt;&amp;nbsp;Ram&lt;/li&gt;
&lt;li&gt;Magic&amp;nbsp;Mouse&lt;/li&gt;
&lt;li&gt;Apple wireless bluetooth&amp;nbsp;keyboard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don&amp;#8217;t use this often, as it is the computer my &lt;a href=&#34;http://twitter.com/nicolegrouchy&#34;&gt;wife&lt;/a&gt; uses primarily. I only tend to use it when I
don&amp;#8217;t feel like slogging around with my laptop at home, or I have left it at the &lt;a href=&#34;http://swixhq.com&#34;&gt;office&lt;/a&gt; or&amp;nbsp;something.&lt;/p&gt;
&lt;p&gt;I have also taken to writing drafts for my blogposts using &lt;a href=&#34;http://gist.github.com&#34;&gt;Github Gists&lt;/a&gt; with my &lt;a href=&#34;http://amzn.to/KLFZrw&#34;&gt;1st Generation &lt;span class=&#34;caps&#34;&gt;32GB&lt;/span&gt; iPad&lt;/a&gt; and the apple bluetooth keyboard. I have found this to be a fantastic way to write a blogpost or a little code while out at a coffee shop or anywhere else when I am on the&amp;nbsp;go.&lt;/p&gt;
&lt;h2&gt;Software&lt;/h2&gt;
&lt;p&gt;Like I said earlier, I don&amp;#8217;t spend too much time outside the console, but when I do these are the things I couldn&amp;#8217;t live&amp;nbsp;without.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://manytricks.com/moom/&#34;&gt;Moom&lt;/a&gt; - This is an awesome app, it allows you to tile windows in &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;, attach hotkeys to tiling commands and a bunch of other niceties that don&amp;#8217;t exist on&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rd.io&#34;&gt;rdio&lt;/a&gt; - As I mentioned earlier, I use rdio. I listen to music all the time while coding, or thinking or just about anything, so I have rdio going basically all the&amp;nbsp;time.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://giantcomet.com/flint&#34;&gt;Flint&lt;/a&gt; - We use campfire for team chat in the office so I use flint for&amp;nbsp;that.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chrome.google.com&#34;&gt;Chrome&lt;/a&gt; - The web browser of champions, I pretty much use Chrome exclusively now and normally have way too many tabs&amp;nbsp;open.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skitch.com/&#34;&gt;Skitch&lt;/a&gt; - I use skitch for taking screenshots on &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; it has really great support for simple editing and cropping of your screenshots that I would have a hard time switching to anything else. I dont use their server anymore for storage of my screenshots, I have a proxy set up using &lt;a href=&#34;http://heroku.com&#34;&gt;heroku&lt;/a&gt; to send my screenshots to a Amazon S3 bucket. This is accomplished with &lt;a href=&#34;https://github.com/mgrouchy/s3itch&#34;&gt;s3itch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://db.tt/Hc6Cqm1&#34;&gt;Dropbox&lt;/a&gt; -Dropbox is fantastic. I store all the git repos I am working on in Github and it has saved my butt a few times now. I can feel safe everything is backed up and even untracked files(in git) are being versioned, just incase I delete a untracked file I end up&amp;nbsp;needing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; - Alfred is an indispensable quick launcher app in the vein of &lt;a href=&#34;http://qsapp.com/&#34;&gt;quicksilver&lt;/a&gt;. I spend most of my time with my hands off the mouse so I don&amp;#8217;t know what I would do without&amp;nbsp;Alfred.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rescuetime.com/ref/161860&#34;&gt;RescueTime&lt;/a&gt; - I work pretty hard to try to stay productive and at the very least stay knowledgeable about where my time is going. RescueTime helps with that by tracking what I do on the computer every&amp;nbsp;day.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Command Line&amp;nbsp;Life&lt;/h2&gt;
&lt;p&gt;The command line is where I spend most of my time, on &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; I don&amp;#8217;t use the terminal software that comes with &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;, I use &lt;a href=&#34;http://www.iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;. In that terminal I&amp;nbsp;use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zsh.org/&#34;&gt;Zsh&lt;/a&gt; with &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh/&#34;&gt;Oh-my-zsh&lt;/a&gt;, because as you know, &lt;a href=&#34;&#34;&gt;Zsh is your friend&lt;/a&gt;, you can check out my .zshrc in my &lt;a href=&#34;https://github.com/mgrouchy/dotfiles&#34;&gt;dotfiles repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt; - The only text editor in my opinion. This is where I spend most of my time check out my &lt;a href=&#34;https://github.com/mgrouchy/vim&#34;&gt;vimfiles&lt;/a&gt; for setup&amp;nbsp;details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;vim screenshot&#34; src=&#34;http://img.mikegrouchy.s3.amazonaws.com/1._ControlP_-_%28%7E%29_-_VIM_%28vim%29-20120628-111826.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tmux.sourceforge.net/&#34;&gt;tmux&lt;/a&gt; - Tmux is great. Its a great alternative to gnu screen, highly configurable and looks&amp;nbsp;great.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;tmux screenshot&#34; src=&#34;http://img.mikegrouchy.s3.amazonaws.com/1._tmux_%28tmux%29-20120628-111332.jpg&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bpython-interpreter.org/&#34;&gt;bpython&lt;/a&gt; - bpython is improved interface to the Python interpreter. It supports syntax highlighting, autocomplete and a bunch of other useful features. I usually have bpython open all day every&amp;nbsp;day.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;bpython screenshot&#34; src=&#34;http://img.mikegrouchy.s3.amazonaws.com/1._bpython_%28Python%29-20120628-111458.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;On My&amp;nbsp;desk&lt;/h2&gt;
&lt;p&gt;Books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/L2qI4V&#34;&gt;Natural Language Processing With Python&lt;/a&gt; - Steven Bird, Ewan Klein and Edward&amp;nbsp;Loper&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/KyjsLo&#34;&gt;Javascript - The Definitive Guide&lt;/a&gt; - David&amp;nbsp;Flanagan&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/M3xogV&#34;&gt;Expert Python Programming&lt;/a&gt; - Tarek&amp;nbsp;Zaide&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A bunch of &lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoders&lt;/a&gt;&amp;nbsp;stickers&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Pycoders Sickers!&#34; src=&#34;http://mikegrouchy.com/media/images/2012/07/pycoders-stickers.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thats about it. What does your setup look&amp;nbsp;like?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Broken RSS Links Fixed</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2012/07/broken-rss-links-fixed.html"/>
            <updated>2012-07-10T09:00:00Z</updated>
            <published>2012-07-10T09:00:00Z</published>
            <id>http://mikegrouchy.comblog/2012/07/broken-rss-links-fixed.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="meta"
                        label="Meta" />
            
            <content type="html">
                                &lt;p&gt;&lt;img alt=&#34;Darth Fail&#34; src=&#34;/media/images/2012/07/darth-vader-epic-fail.jpeg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It seems my &lt;span class=&#34;caps&#34;&gt;RSS&lt;/span&gt; feed has failed epically and none of the actual links to the blog
worked. Not too awesome for you &lt;span class=&#34;caps&#34;&gt;RSS&lt;/span&gt; readers out&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Needless to say, that is fixed now. Thank you to the people who went through the
trouble to notify me of my broken &lt;span class=&#34;caps&#34;&gt;RSS&lt;/span&gt;. Your help is much&amp;nbsp;appreciated.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Setting up PyPy 1.9 on OSX</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2012/07/setting-up-pypy-1.9-on-osx.html"/>
            <updated>2012-07-08T10:00:00Z</updated>
            <published>2012-07-08T10:00:00Z</published>
            <id>http://mikegrouchy.comblog/2012/07/setting-up-pypy-1.9-on-osx.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="software"
                        label="Software" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="programming"
                        label="Programming" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="pypy"
                        label="Pypy" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
            
            <content type="html">
                                &lt;p&gt;&lt;img alt=&#34;pypy&#34; src=&#34;http://pypy.org/image/pypy-logo.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As I had said before on &lt;a href=&#34;http://mikegrouchy.com/blog/setting-up-nginx-with-ssl-and-godaddy.html&#34;&gt;this&lt;/a&gt; &lt;a href=&#34;http://mikegrouchy.com/blog/great-django-test-talks.html&#34;&gt;blog&lt;/a&gt;, I sometimes use it as a way to record things I want to remember. This is one of those&amp;nbsp;times.&lt;/p&gt;
&lt;p&gt;I have started a new project that uses PyPy and while there is documentation out there to get started, I find it useful to have it all in the same place and not spread&amp;nbsp;around.&lt;/p&gt;
&lt;h2&gt;What is&amp;nbsp;PyPy&lt;/h2&gt;
&lt;p&gt;PyPy is Python interpreter and &lt;span class=&#34;caps&#34;&gt;JIT&lt;/span&gt; compiler. The latest PyPy release PyPy 1.9, the one we are installing, is CPython 2.7.2 compatible. PyPy is focused on speed and 100% compatibility with the &lt;a href=&#34;http://en.wikipedia.org/wiki/CPython&#34;&gt;CPython&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing&amp;nbsp;PyPy&lt;/h2&gt;
&lt;p&gt;There are a couple of options to install PyPy on&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can install using the &lt;a href=&#34;https://bitbucket.org/pypy/pypy/downloads/pypy-1.9-osx64.tar.bz2&#34;&gt;binary&lt;/a&gt; from the PyPy&amp;nbsp;website.&lt;/li&gt;
&lt;li&gt;You can &lt;a href=&#34;http://pypy.org/download.html#building-from-source&#34;&gt;build PyPy from source&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can install using &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to manage my packages using Homebrew when thats an option, so I installed using Homebrew.
It was very easy to get setup just
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;brew install pypy&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Then follow any instructions in your&amp;nbsp;terminal.&lt;/p&gt;
&lt;p&gt;You should then see a symlink in your /usr/local/bin directory for&amp;nbsp;PyPy&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;~ &amp;gt;&amp;gt; ls /usr/local/bin | grep pypy&lt;br /&gt;    pypy&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And assuming you have homebrew setup correctly you should be able to type &amp;#8220;pypy&amp;#8221; in your terminal and get an interactive&amp;nbsp;interpreter.&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;~ &amp;gt;&amp;gt; pypy&lt;br /&gt; Python 2.7.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;341e1e3821ff, Jun 07 2012, 15:42:54&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;PyPy 1.9.0 with &lt;span class=&#34;caps&#34;&gt;GCC&lt;/span&gt; 4.2.1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; on darwin&lt;br /&gt;   Type &lt;span class=&#34;s2&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;more information.&lt;br /&gt; And now &lt;span class=&#34;k&#34;&gt;for &lt;/span&gt;something completely different: &lt;span class=&#34;sb&#34;&gt;``&lt;/span&gt;it&lt;span class=&#34;s1&#34;&gt;&amp;#39;s beautiful: very rectangular&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;s1&#34;&gt;    and yellow&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;br /&gt;  &amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;If you have gotten this far you have been successful at installing&amp;nbsp;PyPy!&lt;/p&gt;
&lt;p&gt;Now, like any good &lt;a href=&#34;http://pycoders.com&#34;&gt;pycoder&lt;/a&gt;, lets move on to getting PyPy setup inside a&amp;nbsp;Virtualenv.&lt;/p&gt;
&lt;h2&gt;Getting PyPy to work with Virtualenv or&amp;nbsp;Virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;Luckily getting PyPy set up in a virtualenv is really easy, for virtualenv the command&amp;nbsp;is:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;virtualenv -p /usr/local/bin/pypy environmentname&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;for Virtualenvwrapper, its basically the&amp;nbsp;same:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;mkvirtualenv -p /usr/local/bin/pypy environmentname&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;In the output of each of these commands you should&amp;nbsp;see:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;Running virtualenv with interpreter /usr/local/bin/pypy&lt;br /&gt; New pypy executable in testpypy2/bin/pypy&lt;br /&gt; Installing setuptools............done.&lt;br /&gt;    Installing pip...............done.&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now you can activate your&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;In&amp;nbsp;virtualenv:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; /path/to/your/virtualenv/bin/activate&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.doughellmann.com/projects/virtualenvwrapper/&#34;&gt;virtualenvwrapper&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;workon environmentname&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;And test your Python&amp;nbsp;version:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;python --version&lt;br /&gt;    Python 2.7.2 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;341e1e3821ff, Jun 07 2012, 15:42:54&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;PyPy 1.9.0 with &lt;span class=&#34;caps&#34;&gt;GCC&lt;/span&gt; 4.2.1&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;Now you are good to get working on your Python project with PyPy. Happy&amp;nbsp;hacking!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Write Less Code</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/2012/06/write-less-code.html"/>
            <updated>2012-06-26T09:50:00Z</updated>
            <published>2012-06-26T09:50:00Z</published>
            <id>http://mikegrouchy.comblog/2012/06/write-less-code.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="software"
                        label="Software" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="programming"
                        label="Programming" />
            
            <content type="html">
                                &lt;p&gt;One of the fundamental truths of software development is that you have to write code,
but one of the biggest fallacies is the idea that writing code is your job. When I
first started out as a software developer, I fell into that trap, writing code is
a powerful thing, its empowering, you feel like you are productive and you are
accomplishing things. However, what I have learned over the years is the real
truth of the matter. The truth that the job of a software developer is to write
as little code as&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;Now, don&amp;#8217;t get me wrong, we should not be getting ourselves into &lt;a href=&#34;http://codegolf.com/&#34;&gt;code golf&lt;/a&gt;
situations where we are compacting code and saving keystrokes to the point where
the code you produce is no longer understandable. When you think about it though
the fact that most of your time will be maintaining the terrible code you wrote,
writing less code and not creating more work for yourself will start to look like
an exceptionally good&amp;nbsp;idea.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;Look around, look at your tools, look at the framework you likely use to
produce that thing you work on. Everything you do, all the tools you use,
everything is trying make you write less code. Your tools are trying to make
you less error prone, and abstracting away the things that will cause you trouble
down the&amp;nbsp;road.&lt;/p&gt;
&lt;p&gt;So why should you write less code? When I said earlier that your job was to write
less code, I was fibbing a little bit. Really your job is to &lt;strong&gt;think&lt;/strong&gt;, your job
is to think about the problem at hand, devise an elegant solution and then turn
that solution into software. One of the byproducts of creating software is that you
have to write code to solve&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;the thinker&#34; src=&#34;http://upload.wikimedia.org/wikipedia/commons/thumb/5/56/The_Thinker,_Rodin.jpg/250px-The_Thinker,_Rodin.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Code is a&amp;nbsp;by-product&lt;/h2&gt;
&lt;p&gt;Code isn&amp;#8217;t that important. We love to convince ourselves that it is because
as we actually start executing and turning our solutions into software, it seems
like writing code is both a means and an end unto itself. We talk about our
&lt;a href=&#34;http://mikegrouchy.com/blog/compile-vim-with-python-on-osx-with-homebrew.html&#34;&gt;editors&lt;/a&gt;,
we talk about our &lt;a href=&#34;http://pycoders.com&#34;&gt;language of choice&lt;/a&gt; and we talk about our
&lt;a href=&#34;http://mikegrouchy.com/blog/zsh-is-your-friend.html&#34;&gt;environments&lt;/a&gt;. I do it,
you do it, we all do it. There is no shame in enjoying the craft of the work you do.
The trick is to stay focused. Code is awesome, but its also the enemy, it takes
time to write, it can be fragile, it can be unclear and not particularly&amp;nbsp;robust.&lt;/p&gt;
&lt;p&gt;This is why I stick with the mantra &amp;#8220;Write less code&amp;#8221;. Whenever I feel like something
is getting bigger than it should be or more complicated than it should be, I say
&amp;#8220;Write less code&amp;#8221;. Whenever I write so much code that it gets hard to keep it
in context, I refactor, I clean it up, all the while, thinking about &amp;#8220;Write less&amp;nbsp;code&amp;#8221;.&lt;/p&gt;
&lt;p&gt;As much as it pains me to say, sometimes there is no way to get around writing a
bunch of code, but if you can&amp;#8217;t be concise, be clear. Writing less code is
writing &lt;a href=&#34;http://amzn.to/MJFkE4&#34;&gt;clean code&lt;/a&gt;. Writing less code is also about
writing clear code. When you are economical with the code you write the purpose
of your code becomes&amp;nbsp;clear.&lt;/p&gt;
&lt;p&gt;So, whats the lesson here? Most importantly I think the lesson here is that
code is a by-product, its an unavoidable thing that you generate in the process
of doing your job. So think more, &lt;a href=&#34;http://amzn.to/KHjbJp&#34;&gt;refactor more&lt;/a&gt;, remove some
old code and write less new code, do yourself a favor and start this&amp;nbsp;today.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Great Python/Django Testing Talks</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/great-django-test-talks.html"/>
            <updated>2012-06-10T21:05:00Z</updated>
            <published>2012-06-10T21:05:00Z</published>
            <id>http://mikegrouchy.comblog/great-django-test-talks.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="django"
                        label="Django" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="test"
                        label="Test" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="testing"
                        label="Testing" />
            
            <content type="html">
                                &lt;p&gt;I have been working on some tests for an upcoming product at &lt;a href=&#34;http://swixhq.com&#34;&gt;&lt;span class=&#34;caps&#34;&gt;SWIX&lt;/span&gt;&lt;/a&gt;
and as any good developer I think its important to make an effort to constantly be
learning new things. In this vein I starting digging through the videos for
this years &lt;a href=&#34;https://us.pycon.org/2012/&#34;&gt;Pycon &lt;span class=&#34;caps&#34;&gt;US&lt;/span&gt;&lt;/a&gt;. Lo and Behold Testing was a
popular topic at Pycon so there were lots of talks to&amp;nbsp;watch!&lt;/p&gt;
&lt;p&gt;My two favorite talks were Testing and Django by &lt;a href=&#34;https://twitter.com/carljm&#34;&gt;Carl Meyer&lt;/a&gt;
and Fast Test, Slow Test by the always insightful &lt;a href=&#34;https://twitter.com/garybernhardt&#34;&gt;Gary Bernhardt&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Testing and Django - Carl&amp;nbsp;Meyer&lt;/h2&gt;
&lt;p&gt;&lt;iframe width=&#34;600&#34; height=&#34;450&#34; src=&#34;http://www.youtube.com/embed/ickNQcNXiS4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br/&gt;
Carl Meyer gives this great deep dive into testing Django projects, there are
plenty of gems in here, including some code for a Django Test Runner using Unittest2&amp;#8217;s
test discovery. Carl gives some great tips for writing tests with Django as well as tips
for just writing good tests in&amp;nbsp;general.&lt;/p&gt;
&lt;h2&gt;Fast Test, Slow Test - Gary&amp;nbsp;Bernhardt&lt;/h2&gt;
&lt;p&gt;&lt;iframe width=&#34;600&#34; height=&#34;450&#34; src=&#34;http://www.youtube.com/embed/RAxiiRPHS9k&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;br/&gt;
This talk is superb. Gary Bernhardt talks about how to write a fast test suite as
well as how you should be testing your applications. He points out that the slow
test suite problem is usually releated to the problem of test authors writing Unit
Tests which are actually System&amp;nbsp;Tests.&lt;/p&gt;
&lt;p&gt;Those two testing talks were my favorites, but some other good ones that are
worth checking out&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=TmuEDxX1FDQ&#34;&gt;Certainty in an Uncertain World: Gaining Confidence through Security Testing&lt;/a&gt; - Geremy&amp;nbsp;Condra&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hvPYuqzTPIk&#34;&gt;Fake It Til You Make It: Unit Testing Patterns With Mocks and Fakes&lt;/a&gt; - Brian K.&amp;nbsp;Jones&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1VZfL9JVgFg&#34;&gt;Speedily Practical Large-Scale Tests&lt;/a&gt; - Erik&amp;nbsp;Rose&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xu5EhKVZdV8&#34;&gt;Stop Mocking, Start Testing&lt;/a&gt; - Augie Fackler &lt;span class=&#34;amp&#34;&gt;&amp;amp;&lt;/span&gt; Nathaniel&amp;nbsp;Manista&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9LVqBQcFmyw&#34;&gt;pytest - rapid and simple testing with Python&lt;/a&gt; - Holger&amp;nbsp;Krekel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides these videos another great resource to take your Python testing a bit
farther is this book, the &lt;a href=&#34;http://amzn.to/LUe8SX&#34;&gt;Python Testing Cookbook &lt;/a&gt;. It
has plenty of great strategys that you can use for testing your Python&amp;nbsp;projects.&lt;/p&gt;
&lt;p&gt;If you have any other good Django testing tips or Talks leave them in the comments.
If you are looking for more Python news, tips and discussion you should check out
&lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoders Weekly&lt;/a&gt;, a weekly Python newsletter that I&amp;nbsp;curate.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Be Pythonic: __init__.py</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/be-pythonic-initpy.html"/>
            <updated>2012-05-16T23:25:00Z</updated>
            <published>2012-05-16T23:25:00Z</published>
            <id>http://mikegrouchy.comblog/be-pythonic-initpy.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="tips"
                        label="Tips" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="tutorial"
                        label="Tutorial" />
            
            <content type="html">
                                &lt;p&gt;This is hopefully the first in a series of posts about writing Pythonic code and
explaining some common Python&amp;nbsp;idioms.&lt;/p&gt;
&lt;p&gt;So the first thing I am going to address in this series of posts is &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;What is &lt;code&gt;__init__.py&lt;/code&gt; used&amp;nbsp;for?&lt;/h2&gt;
&lt;p&gt;The primary use of &lt;code&gt;__init__.py&lt;/code&gt; is to initialize Python packages. The easiest
way to demonstrate this is to take a look at the structure of a standard python&amp;nbsp;module.&lt;/p&gt;
&lt;pre&gt;
package/
    __init__.py
    file.py
    file2.py
    file3.py
    subpackage/
        __init__.py
        submodule1.py
        submodule2.py
&lt;/pre&gt;

&lt;p&gt;As you can see in the structure above the inclusion of the &lt;code&gt;__init__.py&lt;/code&gt; file in
a directory indicates to the Python interpreter that the directory should be
treated like a Python&amp;nbsp;package&lt;/p&gt;
&lt;h2&gt;What goes in &lt;code&gt;__init__.py&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt; can be an empty file but it is often used to perform setup needed
for the package(import things, load things into path,&amp;nbsp;etc).&lt;/p&gt;
&lt;p&gt;One common thing to do in your &lt;code&gt;__init__.py&lt;/code&gt; is to import selected Classes, functions,
etc into the package level so they can be convieniently imported from the&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;In our example above we can say that file.py has the Class File. So without
anything in our &lt;code&gt;__init__.py&lt;/code&gt; you would import with this syntax:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;package.file&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;However you can import File into your &lt;code&gt;__init__.py&lt;/code&gt; to make it available at the
package level:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;# in your &lt;strong&gt;init&lt;/strong&gt;.py&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;# now import File from package&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Another thing to do is at the package level make subpackages/modules available
with the &lt;code&gt;__all__&lt;/code&gt; variable. When the interpeter sees an &lt;code&gt;__all__&lt;/code&gt; variable defined
in an &lt;code&gt;__init__.py&lt;/code&gt; it imports the modules listed in the &lt;code&gt;__all__&lt;/code&gt; variable when you do:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__all__&lt;/code&gt; is a list containing the names of modules that you want to be imported
with import * so looking at our above example again if we wanted to import the
submodules in subpackage the &lt;code&gt;__all__&lt;/code&gt; variable in &lt;code&gt;subpackage/__init__.py&lt;/code&gt; would be:
    &lt;code&gt;__all__ = [&#39;submodule1&#39;, &#39;submodule2&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;__all__&lt;/code&gt; variable populated like that, when you perform &lt;code&gt;from subpackage import *&lt;/code&gt;
it would import submodule1 and&amp;nbsp;submodule2.&lt;/p&gt;
&lt;p&gt;As you can see &lt;code&gt;__init__.py&lt;/code&gt; can be very useful besides its primary function of
indicating that a directory is a module. If you have any comments or questions,
hit up the comments or contact me on &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are looking for more Python news, tips and discussion you should check out
&lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoder&amp;#8217;s Weekly&lt;/a&gt; a weekly Python newsletter that I&amp;nbsp;curate.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Compile Vim with Python support on OSX with Homebrew</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/compile-vim-with-python-on-osx-with-homebrew.html"/>
            <updated>2012-05-09T10:17:00Z</updated>
            <published>2012-05-09T10:17:00Z</published>
            <id>http://mikegrouchy.comblog/compile-vim-with-python-on-osx-with-homebrew.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="vim"
                        label="Vim" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="homebrew"
                        label="Homebrew" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="OSX"
                        label="Osx" />
            
            <content type="html">
                                &lt;p&gt;&lt;a href=&#34;http://twitter.com/myusuf3&#34;&gt;Mahdi&lt;/a&gt; asked me today how I compiled Vim with +Python
on &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; and I couldn&amp;#8217;t remember the exact commands, so I am writing this blog post
so I will remember in the future and because someone else might find this&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Compiling Vim with +Python or +Ruby is required if you want to run any plugins
that have peices that are written in those languages. The usual way around this
on &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; is to just install &lt;a href=&#34;https://github.com/b4winckler/macvim&#34;&gt;MacVim&lt;/a&gt; and use
that. However, if you really want to use terminal Vim, you are out of luck on&amp;nbsp;&lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So this is where &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;Homebrew&lt;/a&gt; comes in, we can use Homebrew to compile vim from a custom
formula. The only requirements to do this are &lt;a href=&#34;http://mercurial.selenic.com/&#34;&gt;Mercurial&lt;/a&gt; and&amp;nbsp;Homebrew.&lt;/p&gt;
&lt;p&gt;You can install Mercurial by using either easy_install or pip:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#install mercurial&lt;/span&gt;&lt;br /&gt;sudo easy_install mercurial&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;#or&lt;/span&gt;&lt;br /&gt;sudo pip install mercurial&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You can follow the directions on the &lt;a href=&#34;https://github.com/mxcl/homebrew/wiki/installation&#34;&gt;Homebrew Github Wiki&lt;/a&gt; to install&amp;nbsp;homebrew.&lt;/p&gt;
&lt;p&gt;Now you can Install this Homebrew formula which has been modified slightly to my tastes
to install&amp;nbsp;Vim.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/2051422.js?file=vim.rb&#34;&gt;&lt;/script&gt;

&lt;p&gt;To install this formula you can just use this command, or fork the Gist and modify
the formula as you see fit(that&amp;#8217;s what I did) to install your flavor of Vim.
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;brew install https://raw.github.com/gist/2051422/0cfce544a4ab86318221c4d7213306a7b7ec7b3d/vim.rb&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;By default the Vim compiled with this script is compiled with +python and +ruby,
if you want support for other interpreters you can pass those parameters to the script with:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;--enable-interp&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;caps&#34;&gt;NAME&lt;/span&gt;,...&lt;span class=&#34;s2&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;lua, mzscheme, perl, python, python3, tcl and/or ruby&lt;span class=&#34;err&#34;&gt;&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;You can also specify vim be compiled with features(the scripts, default is normal)
To see what the features do, you can see this &lt;a href=&#34;http://www.drchip.org/astronaut/vim/vimfeat.html&#34;&gt;rather ugly table&lt;/a&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;--with-features&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;caps&#34;&gt;TYPE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;tiny, small, normal, big or huge&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Now that you have vim installed with your interpreters and features compiled,
go ahead and check the version:
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;vim --version&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;and you should see that it is the updated&amp;nbsp;version.&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t see that it is the updated version, it means your /usr/local/bin isn&amp;#8217;t
on your path, or if it is on your path it comes after&amp;nbsp;usr/bin.&lt;/p&gt;
&lt;p&gt;So how do you fix&amp;nbsp;this?&lt;/p&gt;
&lt;h2&gt;Option 1: Update your&amp;nbsp;path:&lt;/h2&gt;
&lt;p&gt;In your .zshrc (&lt;a href=&#34;http://mikegrouchy.com/blog/zsh-is-your-friend.html&#34;&gt;you are using Zsh right?&lt;/a&gt;) or .bashrc
update your&amp;nbsp;path.&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;#this&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin:/usr/sbin&lt;br /&gt;&lt;span class=&#34;c&#34;&gt;#to this&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nb&#34;&gt;export &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&lt;span class=&#34;caps&#34;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h2&gt;Option 2: Move your old Vim and symlink the new&amp;nbsp;one&lt;/h2&gt;
&lt;p&gt;You can move the Vim that comes with &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt; and Symlink the one brew&amp;nbsp;installed&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;sudo mv /usr/bin/vim /usr/bin/oldvim&lt;br /&gt;ln -s /usr/local/bin/vim /usr/bin/vim&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Bash&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;One of those should solve your&amp;nbsp;problem.&lt;/p&gt;
&lt;h2&gt;Protip:&lt;/h2&gt;
&lt;p&gt;You may notice that your terminal Vim does not support backspace in Insert mode
with the settings I have setup in the brew&amp;nbsp;formula.&lt;/p&gt;
&lt;p&gt;If this is something you want, you can stick this line in your&amp;nbsp;.vimrc:&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;backspace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;indent&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;start&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;VimL&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;I think that should be it. If you have any questions leave it in the comments or
ask me on &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Edit: Discussion on &lt;a href=&#34;http://news.ycombinator.com/item?id=3949774&#34;&gt;Hacker&amp;nbsp;News&lt;/a&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Introducing Pycoders Weekly</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/introducing-pycoders-weekly.html"/>
            <updated>2012-02-06T10:00:00Z</updated>
            <published>2012-02-06T10:00:00Z</published>
            <id>http://mikegrouchy.comblog/introducing-pycoders-weekly.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="python"
                        label="Python" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="newsletter"
                        label="Newsletter" />
            
            <content type="html">
                                &lt;p&gt;The last couple of weeks &lt;a href=&#34;http://mahdiyusuf.com&#34;&gt;Mahdi Yusuf&lt;/a&gt; and I have been talking
about the python newsletter that we would want to recieve weekly. A curated
collection of the best python news, articles and projects from around the internet
delivered to your inbox in a beautiful package&amp;nbsp;weekly.&lt;/p&gt;
&lt;p&gt;The result of this talk has been &lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoders Weekly&lt;/a&gt;.
The first issue is set to drop on Friday, February 17th, we hope you like it.
&lt;img src=&#34;/media/images/2012/02/pycoders_weekly.png&#34; style=&#34;width:560px; padding:10px;left:auto;right:auto;border:0px;&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If you have created some content or run some project that you think should be
in &lt;a href=&#34;http://pycoders.com&#34;&gt;Pycoders Weekly&lt;/a&gt; contact &lt;a href=&#34;http://twitter.com/myusuf3&#34;&gt;Mahdi&lt;/a&gt;
or &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;me&lt;/a&gt; and let us&amp;nbsp;know.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Zsh is your friend</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/zsh-is-your-friend.html"/>
            <updated>2012-01-31T11:14:00Z</updated>
            <published>2012-01-31T11:14:00Z</published>
            <id>http://mikegrouchy.comblog/zsh-is-your-friend.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="zsh"
                        label="Zsh" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="shell"
                        label="Shell" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="terminal"
                        label="Terminal" />
            
            <content type="html">
                                &lt;p&gt;I don&amp;#8217;t know if you know this, but ZShell is your friend, you might not know it
yet, but its true. I know what you are thinking , &amp;#8220;whats wrong with Bash?&amp;#8221;,
nothing, except its not&amp;nbsp;Zsh.&lt;/p&gt;
&lt;p&gt;Its not that Bash is a bad guy, I don&amp;#8217;t want to put him down, but if we
were picking teams, Bash would be last picked in gym&amp;nbsp;class.&lt;/p&gt;
&lt;p&gt;He isn&amp;#8217;t very versatile and he doesn&amp;#8217;t do anything particularily great, all in all
he is kind of just a worse Zsh(or Zsh is kind of like a better&amp;nbsp;Bash).&lt;/p&gt;
&lt;p&gt;Zsh is easy to get started with because it looks and acts like bash in a lot of
ways. So if you are familiar with bash don&amp;#8217;t worry, you can try zsh out without
skipping a beat and you still end up with a better&amp;nbsp;shell.&lt;/p&gt;
&lt;h3&gt;Why is Zsh better than&amp;nbsp;Bash?&lt;/h3&gt;
&lt;p&gt;In my mind one of the most important reasons why Zsh is better than bash is
autocompletion, and I don&amp;#8217;t mean that whimpy autocompletion you get by installing
bash completion. I mean, this is real deal command completion, besides getting all
the completion of common commands on the command line, and being ridiculously
fast, the completion also gives you a keyboard navigable completion&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/media/images/2012/01/zshcompletion.jpg&#34; style=&#34;width:660px; padding-top:10px;&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Okay, I know what you are saying, big deal right? Well how about really great built
in autocompletion for common commands. Lets use Kill as an example. You&amp;nbsp;type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Kill &amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in bash, you get what, the list of all files that are in your current
working directory. Not very helpful behavior in my opinion. What happens if you&amp;nbsp;type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kill &amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in Zsh?&amp;nbsp;This:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/media/images/2012/01/zshkillcompletion.jpg&#34; style=&#34;width:660px; padding-top:10px;&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Lists of all your processes with pids? Yes&amp;nbsp;please.&lt;/p&gt;
&lt;p&gt;Another thing that make makes Zsh stand out is shared history. If you are anything
like me you live in the terminal all day long. There is nothing worse(I&amp;#8217;m exaggerating)
than opening another terminal in a tab and navigating your history looking for
that recent thing you just did in another window and have it not be in your
history. In Zsh this isn&amp;#8217;t an&amp;nbsp;issue.&lt;/p&gt;
&lt;h3&gt;Time for more&amp;nbsp;awesome&lt;/h3&gt;
&lt;p&gt;Okay, so we have great, fast autocompletion and shared history. How much more awesome
could there be?&amp;nbsp;Lots!&lt;/p&gt;
&lt;p&gt;Autocorrect is pretty&amp;nbsp;cool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mikegrouchyv2 ::(master*) » gut status
zsh: correct &#39;gut&#39; to &#39;git&#39; [nyae]?y
git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hey thats pretty cool, autocorrect for known commands. What would I do
without you(besides type the command&amp;nbsp;again)?&lt;/p&gt;
&lt;p&gt;Even cooler than autocorrect, for the super nerd(like me) Vi and emacs mode,
&lt;strong&gt;shit yeah&lt;/strong&gt;, you can have your favorite editor on your command line. It will
support common movement commands and editing modes, like command and insert mode
for&amp;nbsp;Vi.&lt;/p&gt;
&lt;p&gt;Last but certianly not least, Zsh has &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt;
from the&amp;nbsp;website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A community-driven framework for managing your zsh configuration. Includes 40+ optional plugins (rails, git, &lt;span class=&#34;caps&#34;&gt;OSX&lt;/span&gt;, hub, capistrano, brew, ant, macports, etc), over 80 terminal themes to spice up your morning, and an auto-update tool so that makes it easy to keep up with the latest updates from the&amp;nbsp;community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I know one exists for bash, but I find oh-my-zsh to be excellent, it autoupdates,
has great plugins and a very active community behind&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;All in all, Zsh is pretty great, so if you haven&amp;#8217;t tried Zsh, maybe its time you
try it out. If so &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh-my-zsh&lt;/a&gt; is a
pretty great place to&amp;nbsp;start.&lt;/p&gt;
&lt;p&gt;Also releated reading, a book that was reccomended to me with a lot of great
Zsh tips as well as Bash tips for those who I haven&amp;#8217;t convinced yet is &lt;a href=&#34;http://amzn.to/KkPrDo&#34;&gt;Bash to Z Shell: Conquering the Command Line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are already drinking the Kool-aid and have some Zsh tips to share, either
leave a comment or hit me up on &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class=&#34;caps&#34;&gt;EDIT&lt;/span&gt;&lt;/strong&gt;: If you are interested in learning more about Zsh, check out the &lt;a href=&#34;http://zsh.sourceforge.net/FAQ/&#34;&gt;Zsh &lt;span class=&#34;caps&#34;&gt;FAQ&lt;/span&gt;&lt;/a&gt;.
Its pretty complete and much better than I could do in a very basic blog&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href=&#34;http://news.ycombinator.com/item?id=3533895&#34;&gt;More discussion on Hacker&amp;nbsp;News&lt;/a&gt;&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Setting up SSL with Nginx and Godaddy</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/setting-up-nginx-with-ssl-and-godaddy.html"/>
            <updated>2010-12-14T18:07:00Z</updated>
            <published>2010-12-14T18:07:00Z</published>
            <id>http://mikegrouchy.comblog/setting-up-nginx-with-ssl-and-godaddy.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="ssl"
                        label="Ssl" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="nginx"
                        label="Nginx" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="godaddy"
                        label="Godaddy" />
            
            <content type="html">
                                &lt;p&gt;I was at a local coffee company the other day and &lt;a href=&#34;http://twitter.com/jlgosse&#34;&gt;Josh&lt;/a&gt;
and I were talking about some annoyances when dealing with godaddys &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; certificates.
 Talking to him about this reminded me that I had this post in the pipe for a long
 time and gave me the motivation to finish&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;On Many browsers, if you set up a standard Godaddy &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; Certificate out of the box,
 you will get ssl errors in many browsers saying that they can&amp;#8217;t recognize your
 certificate authority, this is generally not a good thing the whole point of installing
 &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; is for security and establishing trust iwith your customers, clients and website&amp;nbsp;visitors.&lt;/p&gt;
&lt;p&gt;To start the process of getting set up with an &lt;span class=&#34;caps&#34;&gt;SSL&lt;/span&gt; certificate from godaddy just go
 and purchase one. You can pick anyone you like, but in general for most things you
 can get away with just purchasing the cheapest one, I think its around&amp;nbsp;21$/yr.&lt;/p&gt;
&lt;p&gt;After you purchase your certificate, open up a terminal and log onto your server.
 You first need to create a key and certificate request for your domain.
&lt;script src=&#34;http://gist.github.com/524908.js?file=gistfile1.sh&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Just fill out the requested information and you should be good to go. You then log
 into your godaddy account and provide godaddy with the certificate request and they
 will generate the certificate for you. With the cheaper certificate this process usually
 takes minutes. For the more expensive certificte the process takes considerably&amp;nbsp;longer.&lt;/p&gt;
&lt;p&gt;After you recieve your certificates from godaddy, you need to put your certificates
 on your server and then you just add these lines to the approprate section of your
 configs depending on your&amp;nbsp;webserver.&lt;/p&gt;
&lt;p&gt;For nginx:
&lt;script src=&#34;http://gist.github.com/524908.js?file=gistfile2.sh&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;For apache:
&lt;script src=&#34;http://gist.github.com/524908.js?file=gistfile3.sh&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;If you have any questions, either leave something in the comments, or you can catch me &lt;a href=&#34;http://twitter.com/mgrouchy&#34;&gt;here on twitter&lt;/a&gt;.&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">SICP in Epub Format</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/structure-and-interpretation-of-computer-programs-epub.html"/>
            <updated>2010-07-05T20:14:00Z</updated>
            <published>2010-07-05T20:14:00Z</published>
            <id>http://mikegrouchy.comblog/structure-and-interpretation-of-computer-programs-epub.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="book"
                        label="Book" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="lisp"
                        label="Lisp" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="scheme"
                        label="Scheme" />
            
            <content type="html">
                                &lt;p&gt;Awhile ago(I&amp;#8217;m not sure where), I ran across a list of programming/algorithm/computer
 science book reccomendations and on that list was &lt;a href=&#34;http://mitpress.mit.edu/sicp/&#34;&gt;Structure and Interpretation
 of Computer Programs(&lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt;)&lt;/a&gt;. Ever since then it and a few other books have been
 on the top of my &lt;strong&gt;must&lt;/strong&gt; read&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;I have been interested in learning lisp for quite awhile, I think its probably the
 &lt;a href=&#34;http://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; influence, lisp is often talked
 about there as Hacker News is written in a dialect of lisp authored by
 &lt;a href=&#34;http://paulgraham.com&#34;&gt;Paul Graham&lt;/a&gt; and &lt;a href=&#34;http://pdos.csail.mit.edu/~rtm/&#34;&gt;Robert Morris&lt;/a&gt;
 called &lt;a href=&#34;http://arclanguage.org&#34;&gt;Arc&lt;/a&gt;. So while in &lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt; the dialect of
 lisp is not Arc but Scheme, from its description and reviews I have read, &lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt; seems
 like it would be a great way to get started programming in&amp;nbsp;lisp.&lt;/p&gt;
&lt;p&gt;Why learn lisp you say? Certianly not to actually program in it professionally, I
 actually don&amp;#8217;t know anyone who programs in lisp for their job(Thats not to say there
 aren&amp;#8217;t lisp jobs out there). The reason to learn lisp is that by all accounts learning
 lisp is a transformative experience. I have consistently read and have had one of my
 very good friends tell me that learning to write lisp changes the way you think about
 programming and writing software. If nothing else that should make it worth the
 time and effort to&amp;nbsp;learn.&lt;/p&gt;
&lt;p&gt;So back to &lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt;. I have been meaning to pick up a copy and start reading it for awhile
 but I had never got around to it. There is a web version but like a lot of people,
 I have a hard time reading from my computer screen, not because it hurts my eyes or
 anything like that, I think its just a matter of focus. There are so many things external
 to the book when you are reading it while sitting at your computer that it becomes tempting
 to multitask while reading. So today I was very excited to learn that &lt;a href=&#34;http://twitter.com/ieure&#34;&gt;Ian Eure&lt;/a&gt;
 created an epub copy of the book and its available on &lt;a href=&#34;http://github.com/ieure/sicp&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a perfect format for me, I can now load it onto my iphone(on stanza or ibooks)
 and read away while I spend my ~1.5 hours/day commuting on the bus back and forth to work.
 I usually try to get books in &lt;span class=&#34;caps&#34;&gt;PDF&lt;/span&gt; form and just read them out of &lt;a href=&#34;https://www.dropbox.com/referrals/NTE5Nzg0MTU5&#34;&gt;dropbox&lt;/a&gt;,
 which is a good experience, but I would definately prefer epub as its easier to read.
 All in all this is a pretty big win for me and its certianly a great motivator to
 get me started reading &lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt; and learning&amp;nbsp;Scheme.&lt;/p&gt;
&lt;p&gt;Are there any books like &lt;span class=&#34;caps&#34;&gt;SICP&lt;/span&gt; that you would reccomend? I&amp;#8217;d love to get some suggestions,
 just leave a note in the&amp;nbsp;comments!&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">My Development Toolbox: An Introduction</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/my-development-toolbox.html"/>
            <updated>2010-07-04T18:14:00Z</updated>
            <published>2010-07-04T18:14:00Z</published>
            <id>http://mikegrouchy.comblog/my-development-toolbox.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="development"
                        label="Development" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="tools"
                        label="Tools" />
            
            <content type="html">
                                &lt;p&gt;Lately I have seen a bunch of posts where bloggers, developers, etc. talk about their
 current development environments and hardware. I really enjoy these posts because
 its always nice to see what tools other developers are using, so I thought I would
 chip in with a few blog posts of my own. In a couple of &amp;#8220;My Toolbox&amp;#8221; posts, I will
 talk about the hardware and software I use to do my work as Software Developer(currently
 doing mostly Python/Django work at &lt;a href=&#34;http://swixhq.com&#34;&gt;&lt;span class=&#34;caps&#34;&gt;SWIX&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All in all the hardware I use in the office is pretty basic. I currently use a
 &lt;strong&gt;13.3-Inch MacBook Pro&lt;/strong&gt;, a pretty standard &lt;strong&gt;Dell 22-inch monitor&lt;/strong&gt;,
 standard &lt;strong&gt;Apple keyboard&lt;/strong&gt; and the amazing &lt;strong&gt;Apple Magic Mouse&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nothing fancy going on there, pretty standard hardware configuration and generally
 what everyone in the office currently uses as we all tend to work both in the office
 and from home from time to time. This hardware is essentially the perfect setup for
 the work that I do. Generally the apps that I use are pretty light and I find the
 13.3 inch Macbook Pro to be pretty zippy. Probably the only thing that would be a
 good upgrade would be from the 22-24 inch monitor to maybe 2-22 inch&amp;nbsp;monitors.&lt;/p&gt;
&lt;p&gt;What does your setup look like? What kind of hardware do you&amp;nbsp;use?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">Embeddable Tweets</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/embeddable-tweets.html"/>
            <updated>2010-05-05T02:14:00Z</updated>
            <published>2010-05-05T02:14:00Z</published>
            <id>http://mikegrouchy.comblog/embeddable-tweets.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="twitter"
                        label="Twitter" />
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="embed"
                        label="Embed" />
            
            <content type="html">
                                &lt;p&gt;Twitter now allows you to Embed a Tweet, all you need is the url of a tweet, like
&lt;a href=&#34;http://twitter.com/mgrouchy/status/13429079254&#34;&gt;http://twitter.com/mgrouchy/status/13429079254&lt;/a&gt;,
and you can use Twitters &lt;a href=&#34;http://media.twitter.com/blackbird-pie/&#34;&gt;Blackbird Pie&lt;/a&gt;
app to embed the tweet in your website like&amp;nbsp;below:&lt;/p&gt;
&lt;!-- http://twitter.com/mgrouchy/status/13429079254 --&gt;

&lt;p&gt;&lt;style type=&#39;text/css&#39;&gt;.bbpBox{background:url(http://s.twimg.com/a/1271891196/images/themes/theme15/bg.png) #022330;padding:20px;}p.bbpTweet{background:#fff;padding:10px 12px 10px 12px;margin:0;min-height:48px;color:#000;font-size:18px !important;line-height:22px;-moz-border-radius:5px;-webkit-border-radius:5px}p.bbpTweet span.metadata{display:block;width:100%;clear:both;margin-top:8px;padding-top:12px;height:40px;border-top:1px solid #fff;border-top:1px solid #e6e6e6}p.bbpTweet span.metadata span.author{line-height:19px}p.bbpTweet span.metadata span.author img{float:left;margin:0 7px 0 0px;width:38px;height:38px}p.bbpTweet a:hover{text-decoration:underline}p.bbpTweet span.timestamp{font-size:12px;display:block}&lt;/style&gt; &lt;div class=&#39;bbpBox&#39;&gt;&lt;p class=&#39;bbpTweet&#39;&gt;This is me tweeting about how you can embed tweets, is this embedded?&lt;span class=&#39;timestamp&#39;&gt;&lt;a title=&#39;Wed May 05 14:23:55 +0000 2010&#39; href=&#39;http://twitter.com/mgrouchy/status/13429079254&#39;&gt;less than a minute ago&lt;/a&gt; via &lt;a href=&#34;http://www.tweetdeck.com&#34; rel=&#34;nofollow&#34;&gt;TweetDeck&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;metadata&#39;&gt;&lt;span class=&#39;author&#39;&gt;&lt;a href=&#39;http://twitter.com/mgrouchy&#39;&gt;&lt;img src=&#39;http://a3.twimg.com/profile_images/817183015/swix-hipster_normal.JPG&#39; /&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#39;http://twitter.com/mgrouchy&#39;&gt;Mike Grouchy&lt;/a&gt;&lt;/strong&gt;&lt;br/&gt;mgrouchy&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt; &lt;!-- end of tweet --&gt;&lt;/p&gt;
&lt;p&gt;Here is the Source:
&lt;script src=&#34;http://gist.github.com/390841.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Its kind of interesting, Blackbird Pie just generates a html/css snippet that you
 can embed in your page. I am not sure if I prefer this way of doing things or the
 way &lt;a href=&#34;http://github.com&#34;&gt;github&lt;/a&gt; does it with cross site&amp;nbsp;javascript.&lt;/p&gt;
&lt;p&gt;What do you&amp;nbsp;think?&lt;/p&gt;            </content>
        </entry>
            <entry>
            <title type="html">A New Blog A New Beginning</title>
            <author><name>Mike Grouchy</name></author>
            <link href="http://mikegrouchy.com/blog/a-new-blog-a-new-beginning.html"/>
            <updated>2010-04-30T20:14:00Z</updated>
            <published>2010-04-30T20:14:00Z</published>
            <id>http://mikegrouchy.comblog/a-new-blog-a-new-beginning.html</id>
                        <category   scheme="http://mikegrouchy.com/blog/tags'"
                        term="meta"
                        label="Meta" />
            
            <content type="html">
                                &lt;p&gt;So as you can tell this all looks a bit different. This blog that you are currently
reading is &lt;strong&gt;completely static&lt;/strong&gt;. All of this post content is actually written in
&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;markdown&lt;/a&gt; and then generated as static html by
&lt;a href=&#34;http://hyde.github.com/&#34;&gt;Hyde&lt;/a&gt;. As you can tell some of the css is off and
this blog isn&amp;#8217;t overly full featured. I&amp;#8217;m considering this a work in process and
a little project to import my css skills as well as a fun little thing I can work
on, on the side.  I will probably write a post about how to get started with hyde
for people interested in trying it&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;I decided that with this new blog its a completely fresh start, I haven&amp;#8217;t carried
over any of the old posts from my old blog and I could care less about the google
juice I am losing because of that. In this new incarnation of the blog, I&amp;#8217;m hoping
I will post a little more consistently as well as bring a tighter focus. I have
had &lt;a href=&#34;http://mikegrouchy.com&#34;&gt;mikegrouchy.com&lt;/a&gt; for 6 years and it has
been a blog that entire time, but there hasn&amp;#8217;t been a lot of great content. I plan
on bringing back some of my old tutorial posts that people used ,
but probably update them a bit which hopefully will be an&amp;nbsp;improvement.&lt;/p&gt;            </content>
        </entry>
    </feed>